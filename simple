#include<linux/list.h>
#include<linux/kernel.h>
#include<linux/module.h>
#include<linux/types.h>
#include<linux/slab.h>

struct birthday
{
    int day;
    int month;
    int year;
    struct list_head list;
};

void ListInsert(struct list_head *head, int year, int month, int day)
{
    struct birthday *person;
    person = kmalloc(sizeof(*person), GFP_KERNEL);
    person->day = day;
    person->month = month;
    person->year = year;
    INIT-_LIST_HEAD(&person->list);
    list_add_tail(&person -> list,head);
}

void ListPrint(struct list_head *head)
{
    struct birthday * ptr = NULL;
    list_for_each_entry(ptr, head, list)
    {
	printk("%d/%d/%d\n", ptr->year,ptr -> month, ptr -> day);
    }
}

void ListDelete(struct list_head *head, int year)
{
    struct birthday *ptr, *next;
    list_for_each_entry_safe(ptr, next, head, list)
    {
	if(ptr->year == year)
	{
	    list_del(&ptr->list);
	    kfree(ptr);
	}
    }
    printk("delete element && year = 2018!\n");
}

int simple_init(void)
{
    printk("Loaded Modules\n");
    static LIST_HEAD(birthday_list);

    ListInsert(&birthday_list, 2019, 9, 27);
    printk("initial element: 2019/9/27\n");
    printk("insert element: 1998/4/27\n");
    ListInsert(&birthday_list, 1998, 4, 27);
    printk("ergodic elements:\n");
    ListPrint(&birthday_list);
    printk("delete element && year=2019:\n");
    ListDelete(&birthday_list, 2019);
    printk("ergodic elements:\n");
    ListPrint(&birthday_list);
    return 0;
}

void simple_exit(void)
{
    printk(KERN_INFO "Removing Modules\n");
}

module_init(simple_init);
module_exit(simple_exit);

MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("Simple Module");
MODULE_AUTHOR("SGG");

